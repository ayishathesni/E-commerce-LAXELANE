<%- include("../../views/partials/admin/header") %>
<head>
   <style>
       .error-message {
           color: red;
       }

       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }

       .thumbnail {
           margin-right: 10px;
       }

       .size-selection {
           border: 1px solid #dee2e6;
           padding: 1.5rem;
           border-radius: 0.375rem;
       }

       .size-grid {
           display: grid;
           grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
           gap: 1rem;
       }

       .size-item {
           padding: 0.5rem;
       }

       .quantity-wrapper {
           flex: 1;
       }

       .checkbox-wrapper {
           min-width: 60px;
       }

       .gap-3 {
           gap: 1rem;
       }
   </style>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data"
                        onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>"
                                class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                      
                            
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea name="description" class="form-control border" rows="4"><%=product.description%></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text"
                                        value="<%=product.regularPrice%>" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input name="salePrice" type="text" value="<%=product.salePrice%>"
                                        class="form-control border">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" value="<%=product.color%>"
                                        class="form-control border">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Size Selection Section -->
                        <div class="size-selection mb-4">
                            <label class="form-label">Available Sizes & Quantity</label>
                            <div id="size-error" class="error-message mb-2"></div>
                            
                            <div class="size-grid">
                                <% const sizes = ["XS", "S", "M", "L", "XL", "XXL"]; %>
                                <% sizes.forEach(size => { %>
                                    <div class="size-item mb-3">
                                        <div class="d-flex align-items-center gap-3">
                                            <div class="checkbox-wrapper">
                                                <input class="form-check-input size-checkbox" 
                                                       type="checkbox" 
                                                       name="sizes[]" 
                                                       value="<%= size %>" 
                                                       id="size<%= size %>" 
                                                       onchange="toggleQuantity('<%= size %>')"
                                                       <%= product.sizes.some(s => s.size === size) ? 'checked' : '' %>>
                                                <label class="form-check-label" for="size<%= size %>"><%= size %></label>
                                            </div>
                                            <div class="quantity-wrapper">
                                                <input type="number" 
                                                       name="quantity_<%= size %>" 
                                                       id="quantity<%= size %>" 
                                                       class="form-control size-quantity" 
                                                       placeholder="Qty" 
                                                       min="1" 
                                                       style="display: <%= product.sizes.some(s => s.size === size) ? 'block' : 'none' %>; width: 80px;"
                                                       value="<%= product.sizes.find(s => s.size === size)?.quantity || '' %>">
                                                <div id="quantity-<%= size %>-error" class="error-message mt-1"></div>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                         
                        <div class="col-sm-6 mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select border" name="category">
                                <% category.forEach(cat => { %>
                                    <option value="<%= cat._id %>" 
                                        <%= cat._id.toString() === product.category._id.toString() ? 'selected' : '' %>>
                                        <%= cat.name %>
                                    </option>
                                <% }); %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>

                        <!-- Images Section -->
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <!-- Existing Images -->
                                <div class="existing-images mb-4">
                                    <%for(let i=0;i<product.productImage.length;i++){%>
                                        <div class="mb-3">
                                            <img class="rounded" style="width: 100px; height: 100px; object-fit: cover;"
                                                src="/uploads/re-image/<%=product.productImage[i]%>"
                                                alt="Product Image">
                                            <button type="button" class="btn btn-danger btn-sm ms-2"
                                                onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>')">
                                                Remove
                                            </button>
                                        </div>
                                    <%}%>
                                </div>

                                <!-- New Image Uploads -->
                                <% for(let i = 1; i <= 4; i++) { %>
                                    <div class="mb-4">
                                        <label class="form-label">Image <%=i%></label>
                                        <div class="card-body align-items-center">
                                            <img src="" alt="" id="imgView<%=i%>" style="max-width: 200px; display: none;">
                                            <input class="form-control" type="file" name="images" id="input<%=i%>"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage(event, <%=i%>)">
                                        </div>
                                        <div class="image-cropper d-flex align-items-center"
                                            style="display: none; width: 300px; height: 200px; margin: 10px 0;">
                                            <img src="" id="croppedImg<%=i%>" alt="">
                                            <button type="button" id="saveButton<%=i%>" class="btn btn-primary btn-sm ms-2">
                                                Save Crop
                                            </button>
                                        </div>
                                    </div>
                                <% } %>
                                <div id="images-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="mt-4">
                            <button class="btn btn-primary" type="button" onclick="validateAndSubmit()">
                                Update Product
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<%- include("../../views/partials/admin/footer") %>
<script>
   
function viewImage1(event) {
    document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0]);
    document.getElementById("imgView1").style.display = "block";
}

function viewImage2(event) {
    document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0]);
    document.getElementById("imgView2").style.display = "block";
}

function viewImage3(event) {
    document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0]);
    document.getElementById("imgView3").style.display = "block";
}

function viewImage4(event) {
    document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0]);
    document.getElementById("imgView4").style.display = "block";
}


document.addEventListener('DOMContentLoaded', function() {
    const sizes = ["XS", "S", "M", "L", "XL", "XXL"];
    sizes.forEach(size => {
        const checkbox = document.getElementById(`size${size}`);
        if (checkbox?.checked) {
            toggleQuantity(size);
        }
    });
});

function toggleQuantity(size) {
    const checkbox = document.getElementById(`size${size}`);
    const quantityInput = document.getElementById(`quantity${size}`);
    const quantityError = document.getElementById(`quantity-${size}-error`);
    
    if (checkbox && quantityInput) {
        if (checkbox.checked) {
            quantityInput.style.display = 'block';
            quantityInput.required = true;
           
            if (!quantityInput.value) {
                quantityInput.value = '1'; 
            }
        } else {
            quantityInput.style.display = 'none';
            quantityInput.required = false;
            quantityInput.value = '';
           
            if (quantityError) {
                quantityError.textContent = '';
                quantityError.style.display = 'none';
            }
        }
    }
}




async function deleteSingleImage(imageId, productId) {
    if (confirm('Are you sure you want to delete this image?')) {
        try {
            const response = await fetch('/admin/deleteImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    imageNameToServer: imageId,
                    productIdToServer: productId
                })
            });
            
            const data = await response.json();
            if (data.status === true) {
                window.location.reload();
            } else {
                alert('Failed to delete image. Please try again.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while deleting the image.');
        }
    }
}


async function validateAndSubmit() {
    if (validateForm()) {
        try {
            const form = document.querySelector('form');
            const formData = new FormData(form);
            
          
            const sizesData = [];
            const sizes = ["XS", "S", "M", "L", "XL", "XXL"];
            
            sizes.forEach(size => {
                const checkbox = document.getElementById(`size${size}`);
                const quantityInput = document.getElementById(`quantity${size}`);
                
                if (checkbox?.checked && quantityInput?.value) {
                    sizesData.push({
                        size: size,
                        quantity: parseInt(quantityInput.value, 10)
                    });
                }
            });

          
            formData.delete('sizes[]');
            formData.append('sizes', JSON.stringify(sizesData));

            const submitButton = document.querySelector('button[type="button"]');
            submitButton.disabled = true;
            submitButton.textContent = 'Updating...';

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData
                });

             
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    const result = await response.json();
                    
                    if (response.ok) {
                        window.location.href = '/admin/products';
                    } else {
                        throw new Error(result.message || result.error || 'Error updating product');
                    }
                } else {
                  
                    const textResponse = await response.text();
                    if (response.ok) {
                     
                        window.location.href = '/admin/products';
                    } else {
                      
                        if (textResponse.includes('<!DOCTYPE html>')) {
                            throw new Error('Server error occurred. Please try again.');
                        } else {
                            throw new Error(textResponse || 'Error updating product');
                        }
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                displayErrorMessage('form-error', error.message);
                submitButton.disabled = false;
                submitButton.textContent = 'Update Product';
            }
        } catch (error) {
            console.error('Error:', error);
            displayErrorMessage('form-error', 'An error occurred while processing the form');
        }
    }
}


function displayErrorMessage(elementId, message) {
    let errorElement = document.getElementById(elementId);
    
 
    if (!errorElement && elementId === 'form-error') {
        errorElement = document.createElement('div');
        errorElement.id = 'form-error';
        errorElement.className = 'alert alert-danger mt-3';
        const form = document.querySelector('form');
        form.insertBefore(errorElement, form.firstChild);
    }
    
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
      
        errorElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
}


function viewImage(event, index) {
    const input = event.target;
    const reader = new FileReader();
    
    reader.onload = function() {
        const dataURL = reader.result;
        const image = document.getElementById(`imgView${index}`);
        if (!image) return;
        
        image.src = dataURL;
        image.style.display = 'block';
        
    
        if (image.cropper) {
            image.cropper.destroy();
        }
        
        const cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true
        });
        
        image.cropper = cropper;

        const cropperContainer = document.querySelector(`#croppedImg${index}`)?.parentNode;
        if (cropperContainer) {
            cropperContainer.style.display = 'flex';
        }

        const saveButton = document.querySelector(`#saveButton${index}`);
        if (saveButton) {
            saveButton.onclick = async function() {
                try {
                    const croppedCanvas = cropper.getCroppedCanvas();
                    const croppedImage = document.getElementById(`croppedImg${index}`);
                    
                    if (croppedImage) {
                        croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                    }

                
                    const blob = await new Promise(resolve => {
                        croppedCanvas.toBlob(resolve, 'image/jpeg', 0.8);
                    });

                
                    const timestamp = new Date().getTime();
                    const fileName = `product_image_${timestamp}_${index}.jpg`;
                    const imageFile = new File([blob], fileName, { type: 'image/jpeg' });

                  
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(imageFile);
                    input.files = dataTransfer.files;

                    if (cropperContainer) {
                        cropperContainer.style.display = 'none';
                    }
                    cropper.destroy();
                    image.cropper = null;

                    const successMessage = document.createElement('div');
                    successMessage.className = 'alert alert-success mt-2';
                    successMessage.textContent = 'Image cropped and saved successfully';
                    input.parentNode.appendChild(successMessage);
                    setTimeout(() => successMessage.remove(), 3000);

                } catch (error) {
                    console.error('Error saving cropped image:', error);
                    alert('Error saving cropped image. Please try again.');
                }
            };
        }
    };

    if (input.files && input.files[0]) {
        reader.readAsDataURL(input.files[0]);
    }
}

function validateForm() {
    clearErrorMessages();
    let isValid = true;

  
    const formElements = {
        name: document.querySelector('input[name="productName"]'),
        description: document.querySelector('textarea[name="description"]'),
        regularPrice: document.querySelector('input[name="regularPrice"]'),
        salePrice: document.querySelector('input[name="salePrice"]'),
        color: document.querySelector('input[name="color"]')
    };


    const nameValue = formElements.name?.value?.trim() || '';
    if (!nameValue) {
        displayErrorMessage('productName-error', 'Please enter a product name');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s'-]{3,50}$/.test(nameValue)) {
        displayErrorMessage('productName-error', 'Invalid product name format');
        isValid = false;
    }


    const descriptionValue = formElements.description?.value?.trim() || '';
    if (!descriptionValue) {
        displayErrorMessage('description-error', 'Please enter a description');
        isValid = false;
    }

   
    const regularPriceValue = formElements.regularPrice?.value || '';
    const regularPriceNum = parseFloat(regularPriceValue);
    if (!regularPriceValue || isNaN(regularPriceNum) || regularPriceNum <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid price');
        isValid = false;
    }


    const salePriceValue = formElements.salePrice?.value || '';
    if (salePriceValue) {
        const salePriceNum = parseFloat(salePriceValue);
        if (isNaN(salePriceNum) || salePriceNum <= 0) {
            displayErrorMessage('salePrice-error', 'Please enter a valid sale price');
            isValid = false;
        } else if (salePriceNum >= regularPriceNum) {
            displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
            isValid = false;
        }
    }

   
    const colorValue = formElements.color?.value?.trim() || '';
    if (!colorValue) {
        displayErrorMessage('color-error', 'Please enter a color');
        isValid = false;
    }


    let hasSelectedSize = false;
    const sizes = ["XS", "S", "M", "L", "XL", "XXL"];
    
    sizes.forEach(size => {
        const checkbox = document.getElementById(`size${size}`);
        const quantityInput = document.getElementById(`quantity${size}`);
        
        if (checkbox?.checked) {
            hasSelectedSize = true;
            if (!quantityInput?.value || parseInt(quantityInput.value) <= 0) {
                displayErrorMessage(`quantity-${size}-error`, `Please enter a valid quantity for size ${size}`);
                isValid = false;
            }
        }
    });

    if (!hasSelectedSize) {
        displayErrorMessage('size-error', 'Please select at least one size');
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.textContent = '';
        element.style.display = 'none';
    });
}

document.addEventListener('DOMContentLoaded', function() {
  
    const sizes = ["XS", "S", "M", "L", "XL", "XXL"];
    sizes.forEach(size => {
        const checkbox = document.getElementById(`size${size}`);
        if (checkbox?.checked) {
            toggleQuantity(size);
        }
    });
    const imageInputs = document.querySelectorAll('input[type="file"]');
    imageInputs.forEach(input => {
        input.addEventListener('change', function(event) {
            const index = this.id.replace('input', '');
            viewImage(event, index);
        });
    });
    if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    }
});
</script>
